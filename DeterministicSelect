import java.util.Arrays;

public class DeterministicSelect {
    public static int select(int[] a, int k) {
        return select(a, 0, a.length - 1, k);
    }

    private static int select(int[] a, int left, int right, int k) {
        if (left == right) return a[left];
        int pivotIndex = medianOfMedians(a, left, right);
        pivotIndex = partition(a, left, right, pivotIndex);
        if (k == pivotIndex) return a[k];
        else if (k < pivotIndex) return select(a, left, pivotIndex - 1, k);
        else return select(a, pivotIndex + 1, right, k);
    }

    private static int partition(int[] a, int left, int right, int pivotIndex) {
        int pivot = a[pivotIndex];
        swap(a, pivotIndex, right);
        int i = left;
        for (int j = left; j < right; j++) {
            if (a[j] < pivot) {
                swap(a, i, j);
                i++;
            }
        }
        swap(a, i, right);
        return i;
    }

    private static int medianOfMedians(int[] a, int left, int right) {
        if (right - left < 5) {
            Arrays.sort(a, left, right + 1);
            return (left + right) / 2;
        }
        int subRight = left;
        for (int i = left; i <= right; i += 5) {
            int subEnd = Math.min(i + 4, right);
            Arrays.sort(a, i, subEnd + 1);
            int median = i + (subEnd - i) / 2;
            swap(a, median, subRight);
            subRight++;
        }
        return medianOfMedians(a, left, subRight - 1);
    }

    private static void swap(int[] a, int i, int j) {
        int tmp = a[i];
        a[i] = a[j];
        a[j] = tmp;
    }

    public static void main(String[] args) {
        int[] arr = {12, 3, 5, 7, 4, 19, 26};
        int k = 3;
        System.out.println(k + "-th smallest: " + select(arr, k));
    }
}
