import java.util.Arrays;

public class MergeSort {
    private static final int CUTOFF = 10;

    public static void sort(int[] a) {
        int[] aux = new int[a.length];
        sort(a, aux, 0, a.length - 1);
    }

    private static void sort(int[] a, int[] aux, int left, int right) {
        if (right - left <= CUTOFF) {
            insertionSort(a, left, right);
            return;
        }
        int mid = (left + right) / 2;
        sort(a, aux, left, mid);
        sort(a, aux, mid + 1, right);
        merge(a, aux, left, mid, right);
    }

    private static void merge(int[] a, int[] aux, int left, int mid, int right) {
        for (int i = left; i <= right; i++) aux[i] = a[i];
        int i = left, j = mid + 1;
        for (int k = left; k <= right; k++) {
            if (i > mid) a[k] = aux[j++];
            else if (j > right) a[k] = aux[i++];
            else if (aux[j] < aux[i]) a[k] = aux[j++];
            else a[k] = aux[i++];
        }
    }

    private static void insertionSort(int[] a, int left, int right) {
        for (int i = left + 1; i <= right; i++) {
            int key = a[i];
            int j = i - 1;
            while (j >= left && a[j] > key) {
                a[j + 1] = a[j];
                j--;
            }
            a[j + 1] = key;
        }
    }

    public static void main(String[] args) {
        int[] arr = {5, 2, 9, 1, 5, 6, 7, 3, 4};
        System.out.println("Before: " + Arrays.toString(arr));
        sort(arr);
        System.out.println("After:  " + Arrays.toString(arr));
    }
}
